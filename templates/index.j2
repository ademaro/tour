<!DOCTYPE html>
<html lang="ru">
<head>
  <title>Flask API + JS</title>
  <meta charset="utf-8">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    h1 {
      background-color: #f8f9fa;
      color: #007bff;
      margin: 0;
      padding: 10px 0;
      text-align: center;
    }
    .tour {
      border: 1px solid #f8f9fa;
      margin: 10px;
      padding: 10px;
    }
    h2 {
      color: #007bff;
      margin: 0;
    }
    p {
      margin: 0;
    }
    .login-form {
      display: none;
      flex-direction: column;
      align-items: center;
      margin: 20px;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
    }
    .login-form input {
      margin: 5px;
      padding: 10px;
      width: 200px;
    }
    .login-form button {
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
    }
    .login-form button:hover {
      background-color: #0056b3;
    }
    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 999;
    }
    #login-button { margin: 10px; }
    button { cursor: pointer; }
    .profile-info {
      text-align: center;
      margin: 20px;
    }
  </style>
</head>
<body>
  <h1>Туры</h1>

  <div class="profile-info" id="profile-info"></div>
  <div class="overlay" id="overlay"></div>
  <form class="login-form" id="login-form">
    <input type="text" id="username" placeholder="Имя пользователя">
    <input type="password" id="password" placeholder="Пароль">
    <button id="login-submit-button">Войти</button>
  </form>
  <button id="login-button">Войти</button>

  <div id="tours">Нет туров...</div>

  <template id="tour">
    <div class="tour">
      <h2></h2>
      <p></p>
      <button>Подробнее</button>
    </div>
  </template>

  <template id="tour-details">
    <div class="tour">
      <h2></h2>
      <p></p>
      <p></p>
      <button>Закрыть</button>
    </div>
  </template>

  <script>
    const tourTemplate = document.querySelector('#tour');
    const tourDetailsTemplate = document.querySelector('#tour-details');
    const toursElement = document.querySelector('#tours');
    const loginButton = document.querySelector('#login-button');
    const loginForm = document.querySelector('#login-form');
    const loginSubmitButton = document.querySelector('#login-submit-button');
    const overlay = document.querySelector('#overlay');
    const profileInfo = document.querySelector('#profile-info');

    const addTour = ({ id, title, price }) => {
      const clone = tourTemplate.content.cloneNode(true);
      clone.querySelector('h2').textContent = title;
      clone.querySelector('p').textContent = price;
      clone.querySelector('button').addEventListener('click', addTourDetailsHandler);
      clone.querySelector('button').dataset.id = id;
      toursElement.appendChild(clone);
    };

    const addTours = (toursData) => {
      toursElement.innerHTML = '';
      toursData.forEach(addTour);
    };

    const fetchData = async (url, options = {}) => {
      try {
        const response = await fetch(url, options);
        const json = await response.json();
        if (!response.ok) {
          let errorMessage = json.message || `Ошибка сервера: ${response.status}`;
          if (!json.message) {
            switch (response.status) {
              case 400:
                errorMessage = 'Некорректный запрос';
                break;
              case 401:
                errorMessage = 'Неавторизованный доступ';
                break;
              case 403:
                errorMessage = 'Доступ запрещён';
                break;
              case 404:
                errorMessage = 'Ресурс не найден';
                break;
              case 500:
                errorMessage = 'Внутренняя ошибка сервера';
                break;
              default:
                errorMessage = `Ошибка: ${response.status}`;
            }
          }
          throw new Error(errorMessage);
        }
        return json;
      } catch (error) {
        console.error('Error fetching data:', error);
        alert(`Ошибка: ${error.message}`);
        throw error;
      }
    };

    const getTours = async () => {
      try {
        const json = await fetchData('{{ url_for('get_tours') }}');
        addTours(json.data);
      } catch (error) {
        console.error('Ошибка получения списка туров:', error);
      }
    };

    getTours();

    const getTour = async (id) => {
      try {
        const json = await fetchData(`/api/tours/${id}`);
        const { title, description, price } = json.data;
        const clone = tourDetailsTemplate.content.cloneNode(true);
        clone.querySelector('h2').textContent = title;
        clone.querySelector('p').textContent = description;
        clone.querySelector('p:last-of-type').textContent = price;
        clone.querySelector('button').addEventListener('click', getTours);
        toursElement.appendChild(clone);
      } catch (error) {
        console.error('Ошибка получения иформации о туре:', error);
      }
    };

    const addTourDetailsHandler = (evt) => {
      if (evt.target.tagName === 'BUTTON') {
        toursElement.innerHTML = '';
        const id = evt.target.dataset.id;
        getTour(id);
      }
    };

    const showLoginForm = () => {
      loginForm.style.display = 'flex';
      overlay.style.display = 'block';
    };

    const hideLoginForm = () => {
      loginForm.style.display = 'none';
      overlay.style.display = 'none';
    };

    const login = async (evt) => {
      evt.preventDefault();
      const username = document.querySelector('#username').value;
      const password = document.querySelector('#password').value;

      try {
        const json = await fetchData('{{ url_for('login') }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ username, password })
        });

        if (json.status === 'success') {
          localStorage.setItem('access_token', json.data.access_token);
          alert('Вы успешно вошли в систему');
          loginButton.textContent = 'Выйти';
          loginButton.removeEventListener('click', showLoginForm);
          loginButton.addEventListener('click', logout);
          hideLoginForm();
          document.querySelector('#username').value = '';
          document.querySelector('#password').value = '';
          getProfile();
        } else {
          alert(`Ошибка входа: ${json.message}`);
        }
      } catch (error) {
        console.error('Ошибка при попытке входа:', error);
      }
    };

    const logout = () => {
      localStorage.removeItem('access_token');
      alert('Вы вышли из системы');
      loginButton.textContent = 'Войти';
      loginButton.removeEventListener('click', logout);
      loginButton.addEventListener('click', showLoginForm);
      profileInfo.textContent = '';
    };

    const getProfile = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) return;

      try {
        const json = await fetchData('{{ url_for('profile') }}', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (json.status === 'success') {
          profileInfo.textContent = `Добро пожаловать, ${json.message}!`;
        } else {
          console.error('Ошибка при получении иформации о пользователе:', json.message);
        }
      } catch (error) {
        console.error('Ошибка при получении иформации о пользователе:', error);
      }
    };

    loginButton.addEventListener('click', showLoginForm);
    loginForm.addEventListener('submit', login);
    overlay.addEventListener('click', hideLoginForm);

    // Проверка на то, что пользователь уже залогинен
    if (localStorage.getItem('access_token')) {
      loginButton.textContent = 'Выйти';
      loginButton.removeEventListener('click', showLoginForm);
      loginButton.addEventListener('click', logout);
      getProfile();
    }
  </script>
</body>
</html>
